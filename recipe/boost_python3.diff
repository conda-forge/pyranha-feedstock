diff --git a/CMakeLists.txt b/CMakeLists.txt
index 394e7db2b..61ebabace 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -91,7 +91,7 @@ IF(BUILD_TESTS)
 	SET(REQUIRED_BOOST_LIBS ${REQUIRED_BOOST_LIBS} filesystem system)
 ENDIF()
 IF(BUILD_PYRANHA)
-	SET(REQUIRED_BOOST_LIBS ${REQUIRED_BOOST_LIBS} python)
+	SET(REQUIRED_BOOST_LIBS ${REQUIRED_BOOST_LIBS} "python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}")
 ENDIF()
 MESSAGE(STATUS "Required Boost libraries: ${REQUIRED_BOOST_LIBS}")
 FIND_PACKAGE(Boost 1.48.0 REQUIRED COMPONENTS "${REQUIRED_BOOST_LIBS}")
diff --git a/pyranha/CMakeLists.txt b/pyranha/CMakeLists.txt
index 909a4dd3e..dfe24331f 100644
--- a/pyranha/CMakeLists.txt
+++ b/pyranha/CMakeLists.txt
@@ -75,7 +75,15 @@ YACMA_PYTHON_MODULE(_core SHARED
 set(PYRANHA_INSTALL_PATH "${YACMA_PYTHON_MODULES_INSTALL_PATH}/pyranha")
 
 # The module needs Boost.Python and the Python libs, plus the mandatory libraries.
-target_link_libraries(_core ${MANDATORY_LIBRARIES} ${Boost_PYTHON_LIBRARY} ${PYTHON_LIBRARIES})
+target_link_libraries(_core ${MANDATORY_LIBRARIES} ${Boost_PYTHON${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_LIBRARY})
+if(APPLE AND ${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
+	# On OSX + Clang this link flag is apparently necessary in order to avoid
+	# undefined references to symbols defined in the Python library. See also:
+	# https://github.com/potassco/clingo/issues/79
+	# https://stackoverflow.com/questions/25421479/clang-and-undefined-symbols-when-building-a-library
+	# https://cmake.org/pipermail/cmake/2017-March/065115.html
+	set_target_properties(_core PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
+endif()
 install(TARGETS _core
 	RUNTIME DESTINATION ${PYRANHA_INSTALL_PATH}
 	LIBRARY DESTINATION ${PYRANHA_INSTALL_PATH}
